
Missing:
    ✓ best practices
    ✓ .practicelab

    ✓ testSuiteURI
    ✓ implementationReportURI
    ✓ addPatentNote
    ✓ data-oninclude (instead of data-transform for included stuff)
    ✓ charterDisclosureURI ("IG-NOTEs must link to charter's disclosure section using charterDisclosureURI")
    ✓ noTOC
    - markdown support
    - mention ARIA support
    - CG/BG
    - wg, wgURI, wgPatentURI can be an array
    - .issue, .note, data-number, .atrisk, issueBase, atRiskBase
    - .example @title, pre.illegal-example, aside.example, example numbering, <aside>
    - noIDLSorting, noIDLIn, noIDLSectionTitle, idlOldStyleExceptions
    - doRDFa, RDFa in general
    - requirements, .req, a.reqRef
    - dfn algorithm (from v1), .externalDFN
    ✓ is .sectionRef needed or not? It seems to work no matter what! Maybe drop the code?
    - trace, preProcess, postProcess, afterEnd
    - scheme (deprecated?)
    - overrideCopyright
    - subjectPrefix
    ✓ otherLinks
    - .removeOnSave (when it works)
    - license
    - bugTracker.open bugTracker.new
    
    - try setting .container on body, might be faster and can be done earlier in processing
    
    - Common problems
        - still using v1 (or v2)
        - specification published by multiple groups

    - Developers
        ✓ GitHub
        ✓ Branches
        - Extension points
        - Module system
        ✓ Tests
        - Building One's Own Profile
    


WRITING YOUR OWN PROFILE:

There are essentially two steps to make this work: the modules, and the build.

Modules are basically how each little piece of ReSpec functionality is written. If you've looked inside the code, you've seen many that follow the same convention. Modules are brought together by a profile, which you can see exemplified in js/profile-w3c-common.js. Don't pay too much attention to the first lines, but starting from define() you can see that it lists which modules this profile is made of, and that having loaded them, when the DOM is ready, all are run (you can probably just copy the same callback over minus the UI stuff).

Ideally, you would create your own modules (say, under nidash/*) and instead of copying ReSpec's you'd reference them as a dependency. A project that does that is the ReSpec Docs project:

    https://github.com/darobin/respec-docs/

First, create a package.json file containing the following:

{
    "name": "respec-nidash"
,   "version": "0.0.1"
,   "private": true
,   "license": "MIT"
,   "dependencies": {
        "respec": "3.2.x"
    }
}

(That's just an example, salt to taste if you're familiar.) You'll need to have NodeJS and npm installed. Type "npm install -d". That will go fetch the latest ReSpec 3.2 (currently 3.2.6) and store it in node_modules.

Then you create a js/respec-nidash.js file, with content similar to:

    https://github.com/darobin/respec-docs/blob/gh-pages/beryl/beryl.js

The config part tells the system where to find various modules. It points to all the core/* modules as well as a few basic dependencies. You may need some or all of them; if you don't use (or in any way rely) on templates, you won't need the last three set up.

Then you set up a define() so as to specify what your processing pipeline is like. You'll note that the example above freely mixes core/* ReSpec modules and a few that were written specifically for the docs project under beryl/* (which don't need to be configured as they're right there). You can do the very same thing.

If you want to follow the same convention with different base styles, I presume you'll want to bring in most of the core/* in the same order as they are in ReSpec, none of the w3c/* (they are all W3C specific), and all add some of your own at least to set your styling up.

A module that does styling is really simple, let me show you one really quickly:

// nisha/style.js
define(
    ["core/utils"], // depends on the core/utils module
    function (utils) { // gets the core/utils object
        return {
            run: function (conf, doc, cb, msg) {
                // • conf is the configuration as set up with 
                // respecConfig and validated, tweaked, etc.
                // • doc is the document being processed by ReSpec. Note
                // that it can be different from "document", e.g. when
                // testing
                // • cb is the callback you run when done, you can use
                // that to control when it's okay to move to the next 
                // step in case you do asynchronous processing 
                // (otherwise it's just the last thing you call
                // • msg is how you signal the core system that you
                // are starting and stopping processing; and also 
                // "error" and "warn" about issues
                msg.pub("start", "nisha/style"); // we started
                // bring in base W3C styles
                utils.linkCSS(doc, "http://www.w3.org/StyleSheets/TR/base.css");
                // Your own NISHA style on top
                utils.linkCSS(doc, "http://url.to/your.css");
                msg.pub("end", "nisha/style"); // signal end
                cb(); // call next
            }
        };
    }
);

